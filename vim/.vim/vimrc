set nocompatible " Disable backward compatibility with vi
let s:nvim = has('nvim')

" Using vim-plug for plugins
" ============================
" Auto install
let s:vimplug_path = s:nvim ? '~/.local/share/nvim/site/autoload/plug.vim' : '~/.vim/autoload/plug.vim'
if empty(glob(s:vimplug_path))
  silent execute '!curl -fLo ' . s:vimplug_path . ' --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin(s:nvim ? '~/.local/share/nvim/plugged' : '~/.vim/plugged')

" Syntax highlighting
Plug 'sheerun/vim-polyglot' " Syntax highlighting for most languages
Plug 'luochen1990/rainbow' " Color nested parentheses

" Editing
Plug 'jiangmiao/auto-pairs' " Autocomplete for parentheses, quotes, etc.
Plug 'ntpeters/vim-better-whitespace' " Remove trailing whitespace
Plug 'Valloric/YouCompleteMe', { 'do': 'python3 install.py --js-completer --go-completer' } " Auto completion
Plug 'Yggdroot/indentLine' " Display code indentation with lines

" Color schemes
Plug 'morhetz/gruvbox'
Plug 'NLKNguyen/papercolor-theme'

" Status
Plug 'itchyny/lightline.vim' " Status line
Plug 'mhinz/vim-signify' " Changes for version control systems
Plug 'edkolev/tmuxline.vim' " Tmux status line

" Navigation / Organization
Plug 'thaerkh/vim-workspace' " Sessions
Plug 'christoomey/vim-tmux-navigator' " Tmux navigation integration
Plug 'ctrlpvim/ctrlp.vim' " Files

call plug#end() " Initialize plugin system


" Plugin config
" ============================
" vim-signify
let g:signify_vcs_list = ['git']
let g:signify_update_on_focusgained = 1

" CtrlP
let g:ctrlp_cmd = 'CtrlPMixed'
nnoremap <C-n> :CtrlPBuffer<CR>
" Keep MRU file relative to working directory
let g:ctrlp_mruf_relative = 1
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\v[\/]\.?(DS_Store|node_modules|git|hg|svn)$',
  \ 'file': '\v\.(exe|so|dll)$',
  \ 'link': 'some_bad_symbolic_links',
  \ }

" vim-workspace
nnoremap <Leader>w :ToggleWorkspace<CR>
let g:workspace_autocreate = 1
let g:workspace_session_directory = $HOME . '/.vim/sessions/'
let g:workspace_autosave = 0 " Disable auto save
let g:workspace_session_disable_on_args = 1

" Lightline
let g:lightline = {}
set laststatus=2

" Tmuxline
let g:tmuxline_powerline_separators = 0
let g:tmuxline_preset = {
  \ 'a'    : '#S',
  \ 'win'  : '#I・#W',
  \ 'cwin' : '#I・#W',
  \ 'x'    : '#{prefix_highlight} %a %b %d',
  \ 'y'    : '%H:%M',
  \ 'z'    : '#h',
  \ }
let g:tmuxline_status_justify = 'left'

" Rainbow parentheses
let g:rainbow_active = 1 " Enable
let g:rainbow_conf = {
  \ 'guifgs': ['#d3869b', '#83a598', '#fe8019', '#8ec07c'],
  \ }

" Better whitespace
nnoremap <silent> <C-s> :silent :StripWhitespace<CR>

" YouCompleteMe
let g:ycm_add_preview_to_completeopt = 1
let g:ycm_autoclose_preview_window_after_completion = 1
let g:ycm_server_python_interpreter = 'python3'
let g:ycm_python_binary_path = 'python3'

" indentLine
let g:indentLine_char = '┆'
let g:indentLine_fileTypeExclude = ['json', 'markdown'] " Prevent unreadable concealing


" Misc visual settings
" ============================
if s:nvim
  " Enable italics for comments
  highlight Comment cterm=italic gui=italic
endif

if has('termguicolors')
  set termguicolors
endif

" Line numbers
set number
set relativenumber
augroup numbertoggle
  autocmd!
  autocmd BufEnter,FocusGained,InsertLeave * silent set relativenumber
  autocmd BufLeave,FocusLost,InsertEnter   * silent set norelativenumber
augroup END
" Make C-C trigger InsertLeave
inoremap <C-C> <Esc>

autocmd VimEnter,WinEnter * let &scrolloff = winheight(0) / 4 " Scroll limit
set nowrap " Disable line wrapping
set cursorline " Enable cursor line
set incsearch " Search as characters are entered
set hlsearch " Highlight search matches
set showcmd " Show (partial) command on the last line of the screen
set ruler " Show current row, column, percent, etc.


" Color schemes
" ============================
function! s:ReloadLightline()
  call lightline#init()
  call lightline#colorscheme()
  call lightline#update()
endfunction

function! s:SetLightTheme(manual)
  set background=light
  colorscheme PaperColor
  let g:lightline.colorscheme = 'PaperColor'

  if a:manual
    call s:ReloadLightline()
    execute 'Tmuxline vim_statusline_3'
    call system('tmux setenv THEME light')
  endif
endfunction

function! s:SetDarkTheme(manual)
  " Config
  let g:gruvbox_contrast_dark='medium'
  let g:gitgutter_override_sign_column_highlight=1 " Match sign and number column
  let g:gruvbox_invert_selection=0
  if s:nvim
    let g:gruvbox_italic=1
  endif

  set background=dark
  colorscheme gruvbox
  let g:lightline.colorscheme = 'molokai'

  if a:manual
    call s:ReloadLightline()
    execute 'Tmuxline iceberg'
    call system('tmux setenv THEME dark')
  endif
endfunction

" Commands to manually change color scheme
command! L call s:SetLightTheme(1)
command! D call s:SetDarkTheme(1)

" Set colorscheme
let s:theme = trim(system('2>/dev/null tmux showenv THEME | cut -d "=" -f 2'))
if s:theme == 'light'
  call s:SetLightTheme(0)
else
  call s:SetDarkTheme(0)
endif


" Misc settings
" ============================
" Reload buffers if changed outside of vim
set autoread
augroup reloadbuffers
  autocmd!
  autocmd FocusGained * checktime
augroup END

" Disable bells and flashing
set noerrorbells visualbell t_vb=
autocmd GUIEnter * set visualbell t_vb=

set backspace=indent,eol,start " Normal backspace in insert mode
set ignorecase
set smartcase

" Tabs
set list listchars=tab:·\-
set tabstop=2 shiftwidth=2 expandtab
" Language specific tab size
autocmd FileType go setlocal tabstop=2 shiftwidth=2

" Enable mode shapes, 'Cursor' highlight, and blinking:
set guicursor=n-v-c:block,i-ci-ve:ver25,r-cr:hor20,o:hor50,a:blinkwait700-blinkoff400-blinkon250-Cursor/lCursor,sm:block-blinkwait175-blinkoff150-blinkon175

"Folding settings
set foldmethod=indent " Fold based on indent
set foldnestmax=10    " Deepest fold is 10 levels
set nofoldenable      " Dont fold by default
set foldlevel=1       " This is just what i use


" Keyboard shortcuts
" ============================
if s:nvim
  " Remove search highlighting
  nnoremap <silent><Esc> :noh<CR>
else
  " Hit Esc twice to remove search highlighting from previous search
  nnoremap <silent> <Esc><Esc> :noh<CR>
endif
" Press // in visual mode to search selected text
vnoremap // y/<C-R>"<CR>
" Redo macro with space
nnoremap <Space> @q
" Redo macro with leader+space at next search result
nnoremap <Leader><Space> n@q
" Redo macro on all lines in visual mode
vnoremap <Space> :normal @q<CR>
" Redo last change on all lines in visual mode
vnoremap . :normal .<CR>
if s:nvim
  " Press leader+escape in terminal to get out
  tnoremap <Leader><Esc> <C-\><C-n>
endif

" Navigate tabs
nnoremap <silent> H :silent :tabp<CR>
nnoremap <silent> L :silent :tabn<CR>
nnoremap <silent> <C-M> :silent :tabnew<CR>
nnoremap <silent> <A-h> :silent :tabm -1<CR>
nnoremap <silent> <A-l> :silent :tabm +1<CR>
nnoremap <Leader>1 1gt
nnoremap <Leader>2 2gt
nnoremap <Leader>3 3gt
nnoremap <Leader>4 4gt
nnoremap <Leader>5 5gt
nnoremap <Leader>6 6gt
nnoremap <Leader>7 7gt
nnoremap <Leader>8 8gt
nnoremap <silent> <Leader>9 :tablast<CR>

" Switch to last active tab
if !exists('g:lasttab')
  let g:lasttab = 1
  let g:lasttab_backup = 1
endif
augroup lasttab
  autocmd!
  autocmd TabLeave * let g:lasttab_backup = g:lasttab | let g:lasttab = tabpagenr()
  autocmd TabClosed * let g:lasttab = g:lasttab_backup
augroup END
nnoremap <silent> <Leader>l :exe "tabn " . g:lasttab<CR>

" Navigate buffers
nnoremap <silent> <Leader>[ :silent :bp<CR>
nnoremap <silent> <Leader>] :silent :bn<CR>

" Sort
vnoremap <C-s> :sort<CR>

" Spellcheck
nnoremap <Leader>S :setlocal spell! spelllang=en_us<CR>

" Copy/paste using system clipboard
vnoremap <Leader>y "*y
nnoremap <Leader>p "*p
vnoremap <Leader>p "*p
nnoremap <Leader>P "*P
vnoremap <Leader>P "*P
nnoremap <Leader>d "*d
vnoremap <Leader>d "*d

" Reload vimrc
nnoremap <A-r> :source $MYVIMRC<CR>
