set nocompatible " Disable backward compatibility with vi

" Using vim-plug for plugins
" ============================
" Auto install
let s:vimplug_path = '~/.local/share/nvim/site/autoload/plug.vim'
if empty(glob(s:vimplug_path))
  silent execute '!curl -fLo ' . s:vimplug_path . ' --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.local/share/nvim/plugged')

" Syntax highlighting
Plug 'sheerun/vim-polyglot' " Syntax highlighting for most languages
Plug 'luochen1990/rainbow' " Color nested parentheses

" Editing
Plug 'jiangmiao/auto-pairs' " Autocomplete for parentheses, quotes, etc.
Plug 'ntpeters/vim-better-whitespace' " Remove trailing whitespace
Plug 'Valloric/YouCompleteMe', { 'do': 'python3 install.py --js-completer --go-completer' } " Auto completion

" Color schemes
Plug 'sainnhe/forest-night'

" Status
Plug 'itchyny/lightline.vim' " Status line
Plug 'mhinz/vim-signify' " Changes for version control systems
Plug 'edkolev/tmuxline.vim' " Tmux status line

" Navigation / Organization
Plug 'thaerkh/vim-workspace' " Sessions
Plug 'christoomey/vim-tmux-navigator' " Tmux navigation integration
Plug 'junegunn/fzf' " Fuzzy search
Plug 'airblade/vim-rooter' " Project root working directory

call plug#end() " Initialize plugin system


" Plugin config
" ============================
" vim-signify
let g:signify_vcs_list = ['git']
let g:signify_update_on_focusgained = 1

" fzf
" ---
let g:fzf_layout = { 'down': '~25%' }
let $FZF_DEFAULT_COMMAND = 'ag -i --nocolor --nogroup --hidden
      \ --ignore .git
      \ --ignore .svn
      \ --ignore .hg
      \ --ignore .DS_Store
      \ --ignore "**/*.pyc"
      \ --ignore .undodir
      \ --ignore node_modules
      \ -g ""'

fun! s:buflist()
  redir => ls
  silent ls
  redir END
  return split(ls, '\n')
endfun

fun! s:bufopen(lines)
  let cmd = get({
        \ 'ctrl-x': 'sb',
        \ 'ctrl-v': 'vert sb',
        \ 'ctrl-t': 'tab sb',
        \ }, a:lines[0], 'b')
  execute cmd matchstr(a:lines[1], '^[ 0-9]*')
endfun

fun! s:recentlist()
  redir => list
  silent oldfiles
  redir END
  let list = split(list, '\n')
  return map(list, {_, v -> substitute(v, '^[0-9]\+: ', '', '')})
endfun

" Files
nnoremap <silent> <C-p> :exe "FZF" . FindRootDirectory()<CR>
" Buffers
nnoremap <silent> <C-n> :call fzf#run(fzf#wrap({
      \ 'source': reverse(<sid>buflist()),
      \ 'sink*': function('<sid>bufopen'),
      \ 'options': '--expect=ctrl-t,ctrl-v,ctrl-x',
      \ }))<CR>
" Recent
nnoremap <silent> ' :call fzf#run(fzf#wrap({
      \ 'source': <sid>recentlist(),
      \ }))<CR>

" vim-rooter
" ----------
let g:rooter_manual_only = 1
let g:rooter_patterns = ['.git/']

" vim-workspace
nnoremap <Leader>w :ToggleWorkspace<CR>
let g:workspace_autocreate = 1
let g:workspace_session_directory = $HOME . '/.vim/sessions/'
let g:workspace_autosave = 0 " Disable auto save
let g:workspace_session_disable_on_args = 1

set noshowmode " Dedup mode status
let g:lightline = {
      \ 'colorscheme': 'forest_night',
      \ 'tabline': {
      \   'left'  : [['tabs']],
      \   'right' : [[]],
      \ },
      \ 'tab': {
      \   'active': ['filename', 'modified'],
      \   'inactive': ['filename', 'modified'],
      \ },
      \ 'active': {
      \   'left': [['mode', 'paste'],
      \            ['readonly', 'filename']],
      \   'right': [['lineinfo'],
      \             ['percent'],
      \             ['filetype']],
      \ },
      \ 'inactive': {
      \   'left': [['filename']],
      \   'right': [[]],
      \ },
      \ 'component_function': {
      \   'filename': 'LightlineFilename',
      \ },
      \ 'mode_map': {
      \   'n' : 'NOR', 'i' : 'INS', 'R' : 'REP', 'v' : 'VIS', 'V' : 'V-L', "\<C-v>": 'V-B',
      \   'c' : 'COM', 's' : 'SEL', 'S' : 'S-L', "\<C-s>": 'S-B', 't': 'TER',
      \ },
      \ }

fun! LightlineFilename()
  let expanded = expand('%:t')
  let filename = expanded !=# '' ? expanded : '[No Name]'
  let modified = &modified ? ' +' : ''
  return filename . modified
endfun

" Tmuxline
let g:tmuxline_powerline_separators = 0
let g:tmuxline_preset = {
      \ 'win'     : '#W',
      \ 'cwin'    : '#W',
      \ 'x'       : '#T',
      \ 'y'       : '%a %b %d',
      \ 'z'       : '%H:%M',
      \ 'options' : {
      \   'status-justify' : 'left',
      \   'status-style'   : 'default',
      \ },
      \ }

" Rainbow parentheses
let g:rainbow_active = 1 " Enable
let g:rainbow_conf = {
  \ 'ctermfgs': [9, 14, 11, 13],
  \ }

" Better whitespace
nnoremap <silent> <C-s> :silent :StripWhitespace<CR>

" YouCompleteMe
let g:ycm_add_preview_to_completeopt = 1
let g:ycm_autoclose_preview_window_after_completion = 1
let g:ycm_server_python_interpreter = 'python3'
let g:ycm_python_binary_path = 'python3'
let g:python3_host_prog = '/usr/local/bin/python3'


" Misc visual settings
" ============================
set termguicolors
" Line numbers
set number
set relativenumber
augroup numbertoggle
  autocmd!
  autocmd BufEnter,FocusGained,InsertLeave * silent set relativenumber
  autocmd BufLeave,FocusLost,InsertEnter   * silent set norelativenumber
augroup END
" Make C-C trigger InsertLeave
inoremap <C-C> <Esc>

autocmd VimEnter,WinEnter * let &scrolloff = winheight(0) / 4 " Scroll limit
set nowrap " Disable line wrapping
set cursorline " Enable cursor line
set incsearch " Search as characters are entered
set hlsearch " Highlight search matches
set showcmd " Show (partial) command on the last line of the screen
set ruler " Show current row, column, percent, etc.


" Color schemes
" ============================
let g:forest_night_enable_italic = 1
let g:forest_night_sign_column_background = 'none'
let g:forest_night_lightline_disable_bold = 1
colorscheme forest-night
" call tmuxline#set_theme(tmuxline#util#create_theme_from_lightline(lightline#palette()['command']))


" Misc settings
" ============================
" Reload buffers if changed outside of vim
set autoread
augroup reloadbuffers
  autocmd!
  autocmd FocusGained * checktime
augroup END

" Disable bells and flashing
set noerrorbells visualbell t_vb=
autocmd GUIEnter * set visualbell t_vb=

set backspace=indent,eol,start " Normal backspace in insert mode
set ignorecase
set smartcase

" Tabs
set list listchars=tab:Â·\-
set tabstop=2 shiftwidth=2 expandtab
" Language specific tab size
autocmd FileType go setlocal tabstop=2 shiftwidth=2

" Enable mode shapes, 'Cursor' highlight, and blinking:
set guicursor=n-v-c:block,i-ci-ve:ver25,r-cr:hor20,o:hor50,a:blinkwait700-blinkoff400-blinkon250-Cursor/lCursor,sm:block-blinkwait175-blinkoff150-blinkon175

"Folding settings
set foldmethod=indent " Fold based on indent
set foldnestmax=10    " Deepest fold is 10 levels
set nofoldenable      " Dont fold by default
set foldlevel=1       " This is just what i use


" Keyboard shortcuts
" ============================
" Remove search highlighting
nnoremap <silent><Esc> :noh<CR>
" Press // in visual mode to search selected text
vnoremap // y/<C-R>"<CR>
" Redo macro with space
nnoremap <Space> @q
" Redo macro with leader+space at next search result
nnoremap <Leader><Space> n@q
" Redo macro on all lines in visual mode
vnoremap <Space> :normal @q<CR>
" Redo last change on all lines in visual mode
vnoremap . :normal .<CR>
" Press leader+escape in terminal to get out
tnoremap <Leader><Esc> <C-\><C-n>

" Navigate tabs
nnoremap <silent> H :silent :tabp<CR>
nnoremap <silent> L :silent :tabn<CR>
nnoremap <silent> <A-h> :silent :tabm -1<CR>
nnoremap <silent> <A-l> :silent :tabm +1<CR>
nnoremap <Leader>1 1gt
nnoremap <Leader>2 2gt
nnoremap <Leader>3 3gt
nnoremap <Leader>4 4gt
nnoremap <Leader>5 5gt
nnoremap <Leader>6 6gt
nnoremap <Leader>7 7gt
nnoremap <Leader>8 8gt
nnoremap <silent> <Leader>9 :tablast<CR>
nnoremap <silent> <C-T><C-O> :tabonly<CR>
nnoremap <silent> <C-M> :tabnew<CR>

" Switch to last active tab
if !exists('g:lasttab')
  let g:lasttab = 1
  let g:lasttab_backup = 1
endif
augroup lasttab
  autocmd!
  autocmd TabLeave * let g:lasttab_backup = g:lasttab | let g:lasttab = tabpagenr()
  autocmd TabClosed * let g:lasttab = g:lasttab_backup
augroup END
nnoremap <silent> <Leader>l :exe "tabn " . g:lasttab<CR>

" Navigate buffers
nnoremap <silent> <Leader>[ :silent :bp<CR>
nnoremap <silent> <Leader>] :silent :bn<CR>

" Sort
vnoremap <C-s> :sort<CR>

" Spellcheck
nnoremap <Leader>S :setlocal spell! spelllang=en_us<CR>

" Copy/paste/delete using system clipboard
noremap <Leader>y "*y
noremap <Leader>p "*p
noremap <Leader>P "*P
noremap <Leader>d "*d

" Reload vimrc
nnoremap <A-r> :source $MYVIMRC<CR>

" Toggle diff mode
nnoremap <silent> <Leader>D :exe &diff == 0 ? 'windo diffthis' : 'diffoff!'<CR>
